class Maze
  attr_reader :start_pos

  MAZE = [["#","#","#","#","#","#","#","#","#","#"],  #0
          ["#","0"," ","#"," "," "," "," ","*","#"],  #1
          ["#","#"," ","#","#","#"," ","#","#","#"],  #2
          ["#"," "," "," "," ","#"," "," "," ","#"],  #3
          ["#"," ","#","#"," ","#","#","#"," ","#"],  #4
          ["#"," ","#"," "," ","#"," ","#"," ","#"],  #5
          ["#","#","#"," ","#","#"," "," "," ","#"],  #6
          ["#"," ","#"," ","#","#"," ","#"," ","#"],  #7
          ["#"," "," "," "," "," "," ","#"," ","#"],  #8
          ["#","#","#","#","#","#","#","#","#","#"]]  #9
          # 0   1   2   3   4   5   6   7   8   9

  def initialize()
    @start_pos = [1, 1]
    @end_pos = [1, 8]
  end

  def path_available?(pos)
    MAZE[pos[0]][pos[1]] != "#"
  end
  
  def finished?(mazesolver)
    mazesolver.current_pos == @end_pos
  end
end